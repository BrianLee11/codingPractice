pg.39: 되새김문제
이번 1장에서는 C++ 언어의 발전 과정과 특징을 알아보고 개발 환경을 준비해 보았습니다.


문제 1: C++ 언어의 특징
C++ 언어의 특징을 장점 위주로 작성해 보세요.

답변 1: pg.18에 따르면
논문 <Evolving a language in and for the real world: C++ 1991-2006>에서 C++ 가 성공할 수 있었던 언어적 특징은:

1. 낮은 수준 엑세스와 추상화:
C++ 는 C 언어처럼 시스템에 직접 접근할 수 있고,
Simula 처럼 데이터를 추상화하여 접근할 수 있도록 했습니다.

2. 유용한 도구:
C++는 범용 언어로 애플리케이션 개발은 물론,
시스템에 접근하여 하드웨어를 직접 다룰 수도 있습니다.

3. 시점:
C++ 는 객체지향 프로그래밍을 지원하는 첫 번째 언어는 아니었지만,
언어 특유의 범용성 덕분에 출시부터 실제 문제를 해결하는 유용한 도구로 사용되었습니다.

4. 비독점:
AT&T 벨 연구소는 C++ 개발 이후 소유권을 독점하지 않았습니다.
C++ 가 외부에서 개발되는 것을 장려하고, 1989년 이후에는 모든 권리를 표준 기구로 이양했습니다.

5. 안정성:
초기 배포부터 C언어와 호환성, 안정성을 확보했으며
이후에도 높은 호환성과 안정성을 유지하기 위해 표준화 과정을 충실하게 수행했습니다.

6. 발전:
예외 처리, 템플릿, STL 같은 새로운 기능이 C++ 전반에 걸쳐 계속 추가되었습니다.





문제 2: 여러 소스와 라이브러리를 사용하는 프로그램 빌드.
main.cpp와 logic.cpp 두 개의 소스 파일을 사용하여 하나의 프로그램을 만든다고 생각해 봅시다.
복잡한 과정은 생략하고 두 개의 소스 코드와 good_utility.lib 라이브러리를 사용하여 run 이라는 실행 파일을 만드는 과정을
그려 보세요. 본문의 [그림 1-2]을 참고하세요.


답변 2: 실제로 구현해 봤습니다.
아래의 파일을 살펴보세요.
- good_utility.cpp, good_utility.h
- logic.cpp, main.cpp
- CMakeLists.txt

good_utility.h는 어떤 기능을 정의할지 선언합니다 (실제 구현된 기능은 없습니다)
good_utility.cpp는 header file인 good_utility.h를 불러오고, 실제 기능을 구현합니다.
main.cpp는 good_utility.h 와 good_utility.cpp를 불러오고, good_utility.cpp에 구현된 기능을 int main() 에서 실행합니다.
CMakeLists.txt는 어떤 cpp 파일을 해당 프로젝트에 포함시킬지 선언합니다.


# 아래는 main.cpp, logic.cpp, 그리고 정적 라이브러리 good_utility.lib를 사용하여 하나의 실행 파일 run을 만드는 구조입니다.

[사용 파일 목록]
- good_utility.h
- good_utility.cpp (→ 이후 good_utility.lib로 빌드됨)
- logic.cpp
- main.cpp
- CMakeLists.txt

[1. 각 파일의 역할]

(1) good_utility.h
- 헤더 파일로, good_utility 라이브러리에서 제공하는 함수들을 선언합니다.
- 실제 구현은 good_utility.cpp 또는 good_utility.lib에 있습니다.

예시:
#ifndef GOOD_UTILITY_H
#define GOOD_UTILITY_H

void print_message();

#endif

(2) good_utility.cpp
- print_message() 함수의 실제 구현을 포함하며, 정적 라이브러리로 컴파일됩니다.

예시:
#include <iostream>
#include "good_utility.h"

void print_message() {
    std::cout << "Hello from good_utility!" << std::endl;
}

(3) logic.cpp
- 프로그램 내부 로직을 구현하는 파일입니다.

예시:
#include <iostream>

void logic_function() {
    std::cout << "Running logic function." << std::endl;
}

(4) main.cpp
- 프로그램의 진입점(entry point)이며, good_utility와 logic.cpp의 기능을 호출합니다.

예시:
#include "good_utility.h"

void logic_function(); // logic.cpp에 정의된 함수

int main() {
    print_message();    // 라이브러리 함수 호출
    logic_function();   // 로직 함수 호출
    return 0;
}

[2. CMakeLists.txt 예시]

cmake_minimum_required(VERSION 3.10)
project(RunProgram)

set(CMAKE_CXX_STANDARD 17)

# good_utility.lib가 있는 경로
link_directories(${CMAKE_SOURCE_DIR}/lib)

# 실행 파일 run 생성
add_executable(run main.cpp logic.cpp)

# good_utility 정적 라이브러리 링크
target_link_libraries(run good_utility)

# 헤더 파일 경로
target_include_directories(run PRIVATE ${CMAKE_SOURCE_DIR})

[3. 결과]
- main.cpp과 logic.cpp는 함께 컴파일되고,
- good_utility.lib는 링크되어,
- 실행 파일 run이 생성됩니다.
"""

문제 3: 최초의 C++ 국제 표준
C++는 언어의 표준 명세가 국제 표준으로 규정되어 있습니다.
C++ 언어의 최초 표준 명세의 이름과 해당 표준 명세의 주요 특징 2가지를 설명해 보세요.

답변 3: pg.16에 따르면
이름: C++ 98. 1998년 C++ 98이라는 첫 국제 표준 언어 규격이 제정되었습니다.
주요 특징:
- Template 을 활용한 메타 프로그래밍
- STL (Standard Template Library) 의 도입

답변 4: C++ 언어로 만들 수 있는 프로그램
C++ 언어로 만들 수 있는 프로그램의 예를 들고,
C++ 로 개발한 프로그램이 어떻게 높은 성능과 상대적으로 적은 메모리로 동작할 수 있는지 기술해 보세요.

답변 4: pg.21 "C++ 활용 분야"에 따르면, 여러 분야에서 C++ 를 활용하여 개발할 수 있습니다
1. 객체지향 프로그래밍 학습
2. 네이티브 애플리케이션 계산
3. 과학 기술 계산
4. 임베디드 프로그래밍
5. 다중 플랫폼 지원 프로그램

이 중 2. 네이티브 애플리케이션 개발을 살펴보면,
C++ 컴파일러는 플랫폼에 최적화된 기계어 코드를 만들어 내므로
엑셀, 포토샵 같은 애플리케이션을 개발할 수 있습니다.





문제 5: C++ 언어 생태계
C++ 언어의 생태계를 언어 표준, 커뮤니티, 개발 환경, 라이브러리로 구분하여 설명해 보세요.

답변 5: pg.22에 따르면
개발 생태계는 다음으로 분류될 수 있습니다:
1. '표준 명세'
2. '개발자 커뮤니티'
3. '개발 환경과 라이브러리'

1. 표준명세
    - C++ 는 하나의 회사나 단체에 종속되지 않는 열린 생태계를 만들고자 국제 표준으로 재정되었습니다.
    따라서 다양한 회사나 단체, 개발자들이 컴파일러를 만들어서 배포할 수 있습니다.
    - C++ 11 부터를 흔히 '모던 C++'이라고 부릅니다
    - 1998년 처음 ISO 표준이 제정된 이후, 2003년, 2011년, 2014년, 2017년, 2020년, 2023년까지
    총 여섯 차례 표준안이 개정되었습니다.

2. 개발자 커뮤니티
    - C++ 언어를 주제로 한 다양한 커뮤니티가 있습니다.

    1. CppCON (cppcon.org): ISO 표준을 이끄는 비영리 단체인 표준 C++ 파운데이션에서 주관하는 C++ 개발자 콘퍼런스입니다.
        - 매년 다양한 주제의 C++ 관련 주제가 발표되고 있습니다.
        - C++ 언어 규약에 대한 발표가 많으므로 시간이 지나도 참고할 수 있습니다.

    2. Cpp 핵심 가이드라인 (github.com/isocpp/CppCoreGuidelines)
        - 비야네 스트롭스트룹과 다른 개발자들이 함께 주관
        - 새로운 C++ 언어 표준과 개발에 참고할 수 있는 다양한 내용을 제공

    3. C++ 코리아 (github.com/CppKorea)
        - 국내 C++ 개발자들과 만날 수 있습니다.

3. 개발 환경과 라이브러리
    1. 개발 환경
        - C++ 통합 개발 환경 으로는 Visual Studio, XCode, Visual Studio Code, Eclipse 등이 있습니다.
        - 컴파일러와 디버거. 많이 사용하는 컴파일러와 디버거는 다음과 같습니다.
            = GCC와 GDB: gcc.gnu.org
            = Clang과 LLDB: clang.livm.org
            = DPC++/C++

    2. 라이브러리
        - 현대의 소프트웨어는 규모도 크고, 복잡한 기술을 바탕으로 설계되어 전체를 혼자 만들 수는 없습니다.
        - 라이브러리나 프레임워크처럼 이미 개발된 공통의 기능을 가져와 사용해야 합니다.

        몇 가지 라이브러리를 살펴보면,
        오픈소스 C++ 라이브러리 목록: ko.cppreference.com/w/cpp/links/libs
            = Boost C++: 문자열, 포인터, 컨테이너, 알고리즘 등 C++ 프로그램에 필요한 라이브러리가 통합되어 있습니다.
                         C++ 언어 표준에 많이 포함되었지만, 구현체 등이 달라서 구별하여 사용해야 합니다.
            = OpenCV: 이론적인 원리를 알지 못하더라도 영성 처리에 필요한 다양한 기능을 사용할 수 있도록 만들어졌습니다.
                      C++ 언어 외에도 파이썬, C# 등 다양한 언어를 지원합니다.
                      딥러닝 학습에도 많이 사용됩니다.
            = POCO: C++ 언어에서 사용되는 라이브러리를 다양한 운영체제에서 사용할 수 있도록 지원합니다.
            = Tensorflow: 딥러닝을 위한 다양한 라이브러리와 알고리즘을 제공합니다. 텐서플로우 자체는 C++로 구현되어 있고,
                          C++ 와 파이썬을 위한 API를 제공합니다.
            = 언리얼 게임 엔진: 3D 게임을 개발할 때




